import React, { useState } from 'react';
import { useAuth } from '../../../hooks/useAuth';
import styles from './LoginForm.module.css';

const LoginForm = ({ onSwitchToRegister }) => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState(''); // üî• –î–û–ë–ê–í–ò–õ–ò –≠–¢–£ –°–¢–†–û–ö–£
  const { login } = useAuth();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    if (errors[e.target.name]) {
      setErrors({
        ...errors,
        [e.target.name]: ''
      });
    }
    if (successMessage) {
      setSuccessMessage('');
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors(formErrors);
      return;
    }

    setIsLoading(true);
    setErrors({});
    setSuccessMessage(''); // üî• –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    try {
      const loginData = {
        email: formData.email.trim(),
        password: formData.password
      };

      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:', loginData);

      const mockResponse = await mockLoginAPI(loginData);
      
      if (mockResponse.success) {
        // ‚úÖ –£–°–ü–ï–®–ù–´–ô –í–•–û–î
        console.log('‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', mockResponse);
        
        // üîê –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù –ò –í–•–û–î–ò–ú –ß–ï–†–ï–ó –•–£–ö
        login(mockResponse.token, mockResponse.user);
        
        setSuccessMessage(mockResponse.message); // üî• –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        // üéØ –ü–ï–†–ï–ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê –ì–õ–ê–í–ù–£–Æ
        setTimeout(() => {
          console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
          window.location.href = '/';
        }, 1500);

      } else {
        setErrors({ submit: mockResponse.message });
      }

    } catch (error) {
      console.error('üö´ –û—à–∏–±–∫–∞:', error);
      setErrors({ submit: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º' });
    } finally {
      setIsLoading(false);
    }
  };

  // üü¢ –§–£–ù–ö–¶–ò–Ø-–ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –í–•–û–î–ê
  const mockLoginAPI = (loginData) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        const testUsers = [
          { email: 'test@mail.ru', password: '123456' },
          { email: 'user@example.com', password: 'password' }
        ];

        const foundUser = testUsers.find(
          user => user.email === loginData.email && user.password === loginData.password
        );

        if (foundUser) {
          // –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
          resolve({
            success: true,
            message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${loginData.email}!`,
            token: 'mock_jwt_token_' + Date.now(), // –ó–∞–≥–ª—É—à–∫–∞ —Ç–æ–∫–µ–Ω–∞
            user: {
              id: 1,
              email: loginData.email,
              firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
              lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
            }
          });
        } else {
          // –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          resolve({
            success: false,
            message: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å'
          });
        }
      }, 1000); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
    });
  };

  return (
    <form onSubmit={handleSubmit} className={styles.form}>
      {successMessage && ( // üî• –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        <div className={styles.successMessage}>
          ‚úÖ {successMessage}
        </div>
      )}

      <div className={styles.inputGroup}>
        <label className={styles.label}>Email</label>
        <input
          type="email"
          name="email"
          className={`${styles.input} ${errors.email ? styles.error : ''}`}
          value={formData.email}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
          required
          disabled={isLoading}
        />
        {errors.email && <span className={styles.errorText}>{errors.email}</span>}
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>–ü–∞—Ä–æ–ª—å</label>
        <input
          type="password"
          name="password"
          className={`${styles.input} ${errors.password ? styles.error : ''}`}
          value={formData.password}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
          required
          disabled={isLoading}
        />
        {errors.password && <span className={styles.errorText}>{errors.password}</span>}
      </div>

      <div className={styles.options}>
        <button type="button" className={styles.link}>
          –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
        </button>
      </div>

      {errors.submit && (
        <div className={styles.submitError}>‚ùå {errors.submit}</div>
      )}

      <div className={styles.buttons}>
        <button 
          type="button" 
          className={styles.createAccount}
          onClick={onSwitchToRegister}
          disabled={isLoading}
        >
          –°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </button>
        
        <button 
          type="submit" 
          className={styles.loginButton}
          disabled={isLoading}
        >
          {isLoading ? '‚è≥ –í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
        </button>
      </div>
    </form>
  );
};

export default LoginForm;