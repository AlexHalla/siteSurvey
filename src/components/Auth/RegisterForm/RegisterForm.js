import React, { useState } from 'react';
import styles from './RegisterForm.module.css';
import { useAuth } from '../../../hooks/useAuth';

const RegisterForm = ({ onSwitchToLogin }) => {
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    consent: false
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');

  const { register } = useAuth();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prevErrors => ({
        ...prevErrors,
        [name]: ''
      }));
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ
    if (successMessage) {
      setSuccessMessage('');
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.username.trim()) {
      newErrors.username = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    // Either email or phone must be provided
    if (!formData.email.trim() && !formData.phone.trim()) {
      newErrors.contact = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    if (formData.email.trim() && !/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    if (formData.phone.trim() && !/^\+?[\d\s\-\(\)]+$/.test(formData.phone)) {
      newErrors.phone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.password.length < 8) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
    }

    if (!formData.consent) {
      newErrors.consent = '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º';
    }

    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors(formErrors);
      return;
    }

    setIsLoading(true);
    setErrors({});
    setSuccessMessage('');

    try {
      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', { 
        username: formData.username, 
        email: formData.email || null, 
        phone: formData.phone || null, 
        password: formData.password 
      });

      const result = await register(
        formData.username, 
        formData.password, 
        formData.email || null, 
        formData.phone || null
      );

      if (result.success) {
        // ‚úÖ –£–°–ü–ï–®–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result);
        
        if (result.requiresVerification) {
          setSuccessMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à email –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.');
        } else {
          setSuccessMessage('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
          
          // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
          setFormData({
            username: '',
            email: '',
            phone: '',
            password: '',
            confirmPassword: ''
          });
          
          // –†–ï–î–ò–†–ï–ö–¢
          setTimeout(() => {
            window.location.href = '/';
          }, 2000);
        }

      } else {
        // ‚ùå –û–®–ò–ë–ö–ê –û–¢ –°–ï–†–í–ï–†–ê
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if (result.error && result.error.toLowerCase().includes('email')) {
          setErrors({ 
            email: result.error,
            submit: result.error 
          });
        } else if (result.error && result.error.toLowerCase().includes('–ø–∞—Ä–æ–ª—å')) {
          setErrors({ 
            password: result.error,
            submit: result.error 
          });
        } else {
          setErrors({ 
            submit: result.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' 
          });
        }
      }

    } catch (error) {
      // ‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–Ø –ò–õ–ò –ü–ê–†–°–ò–ù–ì–ê
      console.error('üö´ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error);
      setErrors({ 
        submit: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={styles.form}>
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
      {successMessage && (
        <div className={styles.successMessage}>
          ‚úÖ {successMessage}
        </div>
      )}

      <div className={styles.inputGroup}>
        <label className={styles.label}>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
        <input
          type="text"
          name="username"
          className={`${styles.input} ${errors.username ? styles.error : ''}`}
          value={formData.username}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          required
          disabled={isLoading}
        />
        {errors.username && <span className={styles.errorText}>{errors.username}</span>}
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>Email (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
        <input
          type="email"
          name="email"
          className={`${styles.input} ${errors.email ? styles.error : ''}`}
          value={formData.email}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
          disabled={isLoading}
        />
        {errors.email && <span className={styles.errorText}>{errors.email}</span>}
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>–¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
        <input
          type="tel"
          name="phone"
          className={`${styles.input} ${errors.phone ? styles.error : ''}`}
          value={formData.phone}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
          disabled={isLoading}
        />
        {errors.phone && <span className={styles.errorText}>{errors.phone}</span>}
      </div>

      {(errors.contact) && <span className={styles.errorText}>{errors.contact}</span>}

      <div className={styles.inputGroup}>
        <label className={styles.label}>–ü–∞—Ä–æ–ª—å</label>
        <input
          type="password"
          name="password"
          className={`${styles.input} ${errors.password ? styles.error : ''}`}
          value={formData.password}
          onChange={handleChange}
          placeholder="–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤)"
          required
          disabled={isLoading}
        />
        {errors.password && <span className={styles.errorText}>{errors.password}</span>}
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
        <input
          type="password"
          name="confirmPassword"
          className={`${styles.input} ${errors.confirmPassword ? styles.error : ''}`}
          value={formData.confirmPassword}
          onChange={handleChange}
          placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
          required
          disabled={isLoading}
        />
        {errors.confirmPassword && <span className={styles.errorText}>{errors.confirmPassword}</span>}
      </div>

      {/* –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã */}
      {errors.submit && (
        <div className={styles.submitError}>‚ùå {errors.submit}</div>
      )}

      <div className={styles.options}>
        <button 
          type="button" 
          className={styles.link} 
          onClick={onSwitchToLogin}
          disabled={isLoading}
        >
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏
        </button>
      </div>

      <div className={styles.buttons}>
        <div className={styles.inputGroup}>
          <label className={styles.consentLabel}>
            <input
              type="checkbox"
              name="consent"
              checked={formData.consent}
              onChange={(e) => {
                setFormData(prevData => ({
                  ...prevData,
                  consent: e.target.checked
                }));
                // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
                if (errors.consent) {
                  setErrors(prevErrors => ({
                    ...prevErrors,
                    consent: ''
                  }));
                }
              }}
              className={styles.consentCheckbox}
            />
            –Ø —Å–æ–≥–ª–∞—Å–µ–Ω —Å <a href="#" className={styles.consentLink}>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º</a>
          </label>
          {errors.consent && <span className={styles.consentError}>{errors.consent}</span>}
        </div>
        
        <button 
          type="submit" 
          className={styles.registerButton}
          disabled={isLoading}
        >
          {isLoading ? '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
        </button>
      </div>
    </form>
  );
};

export default RegisterForm;