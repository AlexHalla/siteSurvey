import React, { useState } from 'react';
import styles from './RegisterForm.module.css';
import { useAuth } from '../../../hooks/useAuth'; // üî• –î–û–ë–ê–í–ò–õ–ò –ò–ú–ü–û–†–¢ –•–£–ö–ê

const RegisterForm = ({ onSwitchToLogin }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: ''
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState('');

  const { login } = useAuth(); // üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –•–£–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[e.target.name]) {
      setErrors({
        ...errors,
        [e.target.name]: ''
      });
    }
    // –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø—Ä–∏ –Ω–æ–≤–æ–º –≤–≤–æ–¥–µ
    if (successMessage) {
      setSuccessMessage('');
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.firstName.trim()) {
      newErrors.firstName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.lastName.trim()) {
      newErrors.lastName = '–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
    }

    return newErrors;
  };

  // üü¢ –§–£–ù–ö–¶–ò–Ø-–ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ –≥–æ—Ç–æ–≤)
  const mockRegisterAPI = (userData) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        resolve({
          success: true,
          message: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userData.firstName}!`,
          token: 'mock_jwt_token_' + Date.now(),
          user: {
            id: Date.now(),
            email: userData.email,
            firstName: userData.firstName,
            lastName: userData.lastName
          }
        });
      }, 1000);
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    const formErrors = validateForm();
    if (Object.keys(formErrors).length > 0) {
      setErrors(formErrors);
      return;
    }

    setIsLoading(true);
    setErrors({});
    setSuccessMessage('');

    try {
      const userData = {
        firstName: formData.firstName.trim(),
        lastName: formData.lastName.trim(),
        email: formData.email.trim(),
        password: formData.password
      };

      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', userData);

      // üü¢ –í–†–ï–ú–ï–ù–ù–û –ò–°–ü–û–õ–¨–ó–£–ï–ú –ó–ê–ì–õ–£–®–ö–£ (–∫–æ–≥–¥–∞ –±—ç–∫–µ–Ω–¥ –≥–æ—Ç–æ–≤ - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É)
      const result = await mockRegisterAPI(userData);

      // üî• –ö–û–ì–î–ê –ë–≠–ö–ï–ù–î –ì–û–¢–û–í - –†–ê–°–ö–û–ú–ú–ï–ù–¢–ò–†–£–ô–¢–ï –≠–¢–û–¢ –ë–õ–û–ö:
      /*
      const response = await fetch('http://localhost:3001/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(userData)
      });

      console.log('üì© –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', {
        status: response.status,
        ok: response.ok,
        statusText: response.statusText
      });

      const result = await response.json();
      console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', result);
      */

      // –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–ê –û–¢ –°–ï–†–í–ï–†–ê
      if (result.success) { // üî• –ò–ó–ú–ï–ù–ò–õ–ò –£–°–õ–û–í–ò–ï (response.ok && result.success ‚Üí result.success)
        // ‚úÖ –£–°–ü–ï–®–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', result);
        
        // üîê –°–û–•–†–ê–ù–Ø–ï–ú –¢–û–ö–ï–ù –ò –í–•–û–î–ò–ú –ß–ï–†–ï–ó –•–£–ö
        if (result.token) {
          login(result.token, result.user); // üî• –í–•–û–î–ò–ú –í –°–ò–°–¢–ï–ú–£
        }
        
        setSuccessMessage(result.message || '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        
        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        setFormData({
          firstName: '',
          lastName: '',
          email: '',
          password: '',
          confirmPassword: ''
        });
        
        // –†–ï–î–ò–†–ï–ö–¢
        setTimeout(() => {
          window.location.href = '/';
        }, 2000);

      } else {
        // ‚ùå –û–®–ò–ë–ö–ê –û–¢ –°–ï–†–í–ï–†–ê
        console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', result);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        if (result.message && result.message.toLowerCase().includes('email')) {
          setErrors({ 
            email: result.message,
            submit: result.message 
          });
        } else if (result.message && result.message.toLowerCase().includes('–ø–∞—Ä–æ–ª—å')) {
          setErrors({ 
            password: result.message,
            submit: result.message 
          });
        } else {
          setErrors({ 
            submit: result.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' 
          });
        }
      }

    } catch (error) {
      // ‚ùå –û–®–ò–ë–ö–ê –°–ï–¢–ò –ò–õ–ò –ü–ê–†–°–ò–ù–ì–ê
      console.error('üö´ –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:', error);
      setErrors({ 
        submit: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' 
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className={styles.form}>
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ */}
      {successMessage && (
        <div className={styles.successMessage}>
          ‚úÖ {successMessage}
        </div>
      )}

      <div className={styles.nameFields}>
        <div className={styles.inputGroup}>
          <label className={styles.label}>–ò–º—è</label>
          <input
            type="text"
            name="firstName"
            className={`${styles.input} ${errors.firstName ? styles.error : ''}`}
            value={formData.firstName}
            onChange={handleChange}
            placeholder="–ò–º—è"
            required
            disabled={isLoading}
          />
          {errors.firstName && <span className={styles.errorText}>{errors.firstName}</span>}
        </div>
        <div className={styles.inputGroup}>
          <label className={styles.label}>–§–∞–º–∏–ª–∏—è</label>
          <input
            type="text"
            name="lastName"
            className={`${styles.input} ${errors.lastName ? styles.error : ''}`}
            value={formData.lastName}
            onChange={handleChange}
            placeholder="–§–∞–º–∏–ª–∏—è"
            required
            disabled={isLoading}
          />
          {errors.lastName && <span className={styles.errorText}>{errors.lastName}</span>}
        </div>
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>Email</label>
        <input
          type="email"
          name="email"
          className={`${styles.input} ${errors.email ? styles.error : ''}`}
          value={formData.email}
          onChange={handleChange}
          placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email"
          required
          disabled={isLoading}
        />
        {errors.email && <span className={styles.errorText}>{errors.email}</span>}
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>–ü–∞—Ä–æ–ª—å</label>
        <input
          type="password"
          name="password"
          className={`${styles.input} ${errors.password ? styles.error : ''}`}
          value={formData.password}
          onChange={handleChange}
          placeholder="–°–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å"
          required
          disabled={isLoading}
        />
        {errors.password && <span className={styles.errorText}>{errors.password}</span>}
      </div>

      <div className={styles.inputGroup}>
        <label className={styles.label}>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
        <input
          type="password"
          name="confirmPassword"
          className={`${styles.input} ${errors.confirmPassword ? styles.error : ''}`}
          value={formData.confirmPassword}
          onChange={handleChange}
          placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
          required
          disabled={isLoading}
        />
        {errors.confirmPassword && <span className={styles.errorText}>{errors.confirmPassword}</span>}
      </div>

      {/* –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º—ã */}
      {errors.submit && (
        <div className={styles.submitError}>‚ùå {errors.submit}</div>
      )}

      <div className={styles.options}>
        <button 
          type="button" 
          className={styles.link} 
          onClick={onSwitchToLogin}
          disabled={isLoading}
        >
          –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏
        </button>
      </div>

      <div className={styles.buttons}>
        <button 
          type="submit" 
          className={styles.registerButton}
          disabled={isLoading}
        >
          {isLoading ? '‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
        </button>
      </div>
    </form>
  );
};

export default RegisterForm;